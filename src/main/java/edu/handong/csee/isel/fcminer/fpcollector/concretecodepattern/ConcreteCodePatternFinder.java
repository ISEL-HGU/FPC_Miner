package edu.handong.csee.isel.fcminer.fpcollector.concretecodepattern;

import java.util.ArrayList;
import java.util.HashMap;

import edu.handong.csee.isel.fcminer.fpcollector.clustering.Cluster;
import edu.handong.csee.isel.fcminer.fpcollector.tokendiff.compare.MappingStorage;

public class ConcreteCodePatternFinder {
	public void find(HashMap<Integer, Cluster> cluster, ArrayList<Integer> hashedPatternList) {
		ArrayList<CodePatternPair> pairs = splitCodePair(cluster, hashedPatternList);
		ArrayList<CodePatternSet> sets = generatePatternSetIncludeCode(pairs);
		sets = removeSubset(sets);
//		findFrequency(sets);
//		sort(sets);
//		writeConcreteCodePattern(sets);
	}
	
	private ArrayList<CodePatternPair> splitCodePair(HashMap<Integer, Cluster> cluster, ArrayList<Integer> hashedPatternList) {
		ArrayList<CodePatternPair> ps = new ArrayList<>();
		
		for(Integer hashedPattern : hashedPatternList) {			
			for(MappingStorage ms : cluster.get(hashedPattern).getElements()) {
				ps.add(new CodePatternPair(hashedPattern, ms.getVLineCodes().getFirst()));
				ps.add(new CodePatternPair(hashedPattern, ms.getVLineCodes().getSecond()));
			}
		}
		
		return ps;
	}
	
	private ArrayList<CodePatternSet> generatePatternSetIncludeCode(ArrayList<CodePatternPair> ps){
		ArrayList<CodePatternSet> sets = new ArrayList<>();
		HashMap<Integer, Integer> codeMap = new HashMap<>();
		
		int idx = -1;
		
		for(CodePatternPair p : ps) {
			int hashedCode =  p.getCode().hashCode();
			
			if(!codeMap.containsKey(hashedCode)) {
				idx++;
				codeMap.put(hashedCode, idx);				
				sets.add(idx, new CodePatternSet(p.getCode(), p.getHashedPattern()));
			} 
			else {
				/*
				 * duplicated pattern is generated when there are many alarms in one line or
				 * more than one alarms is generated by the same code line
				 */
				sets.get(codeMap.get(hashedCode)).addPattern(p.getHashedPattern());				
			}						
		}
		
		return sets;
	}
	
	private ArrayList<CodePatternSet> removeSubset(ArrayList<CodePatternSet> sets){		
		boolean[] removeIdx = new boolean[sets.size()];
		
		for(int i = 0; i < sets.size(); i ++) {
			CodePatternSet tempSet1 = sets.get(i);
			
			for(int j = 0; j < sets.size(); j ++) {
				if(i == j) continue;				
				CodePatternSet tempSet2 = sets.get(j);
				
				//Is tempSet1 a subset of tempSet2?
				if(subset(tempSet1, tempSet2)) {
					removeIdx[i] = true;
					break;
				}
			}
		}
		
		for(int i = 0; i < removeIdx.length; i ++) {
			if(removeIdx[i]) {
				sets.remove(i);
			}
		}
		
		return sets;
	}
	
	private boolean subset(CodePatternSet set1, CodePatternSet set2) {
		int set1Size = set1.getPatterns().size();
		int set2Size = set2.getPatterns().size();
		if(set1Size > set2Size) {
			return false;
		}
		else {
			int cnt = 0;
			for(int i = 0; i < set1Size; i ++) {
				if(set2.getPatterns().contains(set1.getPatterns().get(i))) {
					cnt++;
				} else break;
			}
			if(cnt == set1Size) 
				return true;
			else 
				return false;
		}			
	}
}
