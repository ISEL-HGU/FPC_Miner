package edu.handong.csee.isel.fcminer.fpcollector.concretecodepattern;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;

import edu.handong.csee.isel.fcminer.fpcollector.clustering.Cluster;
import edu.handong.csee.isel.fcminer.fpcollector.tokendiff.compare.MappingStorage;

public class ConcreteCodePatternFinder {
	public void find(HashMap<Integer, Cluster> cluster, ArrayList<Integer> hashedPatternList) {
		System.out.println("INFO: <Code, Code> -> Code1, Code2 | Spliting Code Pair is Started");
		ArrayList<CodePatternPair> pairs = splitCodePair(cluster, hashedPatternList);
		System.out.println("INFO: Code - {Pattern Set} | Pattern Set Finding is Started");
		ArrayList<CodePatternSet> sets = generatePatternSetIncludeCode(pairs);
		System.out.println("INFO: Subset Removing is Started");
		sets = removeSubset(sets);
//		sets = sortByFrequency(sets);
		writeConcreteCodePattern(sets);
	}
	
	private ArrayList<CodePatternPair> splitCodePair(HashMap<Integer, Cluster> cluster, ArrayList<Integer> hashedPatternList) {
		ArrayList<CodePatternPair> ps = new ArrayList<>();
		int cnt = 0;
		for(Integer hashedPattern : hashedPatternList) {
			cnt ++;
			printProgress(cnt, hashedPatternList.size());
			for(MappingStorage ms : cluster.get(hashedPattern).getElements()) {
				ps.add(new CodePatternPair(hashedPattern, ms.getVLineCodes().getFirst()));
				ps.add(new CodePatternPair(hashedPattern, ms.getVLineCodes().getSecond()));
			}
		}
		
		return ps;
	}
	
	private ArrayList<CodePatternSet> generatePatternSetIncludeCode(ArrayList<CodePatternPair> ps){
		ArrayList<CodePatternSet> sets = new ArrayList<>();
		HashMap<Integer, Integer> codeMap = new HashMap<>();
		
		int idx = -1;
		int cnt = 0;
		for(CodePatternPair p : ps) {
			cnt ++;
			printProgress(cnt, ps.size());
			int hashedCode =  p.getCode().hashCode();
			
			if(!codeMap.containsKey(hashedCode)) {
				idx++;
				codeMap.put(hashedCode, idx);				
				sets.add(idx, new CodePatternSet(p.getCode(), p.getHashedPattern()));
			} 
			else {
				/*
				 * duplicated pattern is generated when there are many alarms in one line or
				 * more than one alarms is generated by the same code line
				 */
				sets.get(codeMap.get(hashedCode)).addPattern(p.getHashedPattern());				
			}						
		}
		
		return sets;
	}
	
	private ArrayList<CodePatternSet> removeSubset(ArrayList<CodePatternSet> sets){		
		boolean[] removeIdx = new boolean[sets.size()];
		
		for(int i = 0; i < sets.size(); i ++) {			
			printProgress(i, sets.size());
			
			CodePatternSet tempSet1 = sets.get(i);
			
			for(int j = 0; j < sets.size(); j ++) {
				if(i == j) continue;				
				CodePatternSet tempSet2 = sets.get(j);
				
				//Is tempSet1 a subset of tempSet2?
				if(subset(tempSet1, tempSet2)) {
					removeIdx[i] = true;
					break;
				}
			}
		}
		
		for(int i = 0; i < removeIdx.length; i ++) {
			if(removeIdx[i]) {
				sets.set(i, null);
			}
		}
		
		return sets;
	}
	
	private boolean subset(CodePatternSet set1, CodePatternSet set2) {
		int set1Size = set1.getPatterns().size();
		int set2Size = set2.getPatterns().size();
		if(set1Size > set2Size) {
			return false;
		}
		else {
			int cnt = 0;
			for(int i = 0; i < set1Size; i ++) {
				if(set2.getPatterns().contains(set1.getPatterns().get(i))) {
					cnt++;
				} else break;
			}
			if(cnt == set1Size) 
				return true;
			else 
				return false;
		}			
	}
	
//	private ArrayList<CodePatternSet> sortByFrequency(ArrayList<CodePatternSet> sets){
//		Collections.sort(sets, new Comparator<CodePatternSet>() {
//			@Override
//			public int compare(CodePatternSet set1, CodePatternSet set2) {
//				return set1.getPatterns().size() - set2.getPatterns().size();
//			}
//			
//		});
//		return sets;
//	}
	
	public void writeConcreteCodePattern(ArrayList<CodePatternSet> sets) {
		String fileName = "./FPC_Patterns_ConcreteCode.csv";				
		
		try(			
			BufferedWriter writer = Files.newBufferedWriter(Paths.get(fileName));
			CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT
					.withHeader("Pattern ID", "Pattern"));
			) {
			int cnt = 0;
			for(int i = 0 ; i < sets.size(); i ++) {
				if(sets.get(i) == null) continue;
				String pattern = sets.get(i).getCode();
				cnt++;
				String patternID = "" + cnt; 			 				
				csvPrinter.printRecord(patternID, pattern);				
			}

			writer.flush();
			writer.close();
		} catch(IOException e){
			e.printStackTrace();
		}
	}
	
	private void printProgress(int cnt, int total) {
		if(total / 10 == cnt) {
			System.out.print("10%...");
		}
		else if(total * 2 / 10 == cnt) {
			System.out.print("20%...");
		}
		else if(total * 3 / 10 == cnt) {
			System.out.print("30%...");
		}
		else if(total * 4 / 10 == cnt) {
			System.out.print("40%...");
		}
		else if(total * 5/ 10 == cnt) {
			System.out.print("50%...");
		}
		else if(total * 6 / 10 == cnt) {
			System.out.print("60%...");
		}
		else if(total * 7 / 10 == cnt) {
			System.out.print("70%...");
		}
		else if(total * 8 / 10 == cnt) {
			System.out.print("80%...");
		}
		else if(total * 9 / 10 == cnt) {
			System.out.print("90%...");
		}
		else if(total-1 == cnt) {
			System.out.print("done!\n");
		}		
	}
}
